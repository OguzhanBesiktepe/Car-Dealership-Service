Index: src/main/java/com/example/cardealershipservice/HelloController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/cardealershipservice/HelloController.java b/src/main/java/com/example/cardealershipservice/HelloController.java
deleted file mode 100644
--- a/src/main/java/com/example/cardealershipservice/HelloController.java	(revision ff4b4bfb52d6ffb4402117d892e9698e0ecec3c1)
+++ /dev/null	(revision ff4b4bfb52d6ffb4402117d892e9698e0ecec3c1)
@@ -1,14 +0,0 @@
-package com.example.cardealershipservice;
-
-import javafx.fxml.FXML;
-import javafx.scene.control.Label;
-
-public class HelloController {
-    @FXML
-    private Label welcomeText;
-
-    @FXML
-    protected void onHelloButtonClick() {
-        welcomeText.setText("Welcome to JavaFX Application!");
-    }
-}
\ No newline at end of file
Index: src/main/java/com/example/cardealershipservice/HelloApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/cardealershipservice/HelloApplication.java b/src/main/java/com/example/cardealershipservice/HelloApplication.java
deleted file mode 100644
--- a/src/main/java/com/example/cardealershipservice/HelloApplication.java	(revision ff4b4bfb52d6ffb4402117d892e9698e0ecec3c1)
+++ /dev/null	(revision ff4b4bfb52d6ffb4402117d892e9698e0ecec3c1)
@@ -1,23 +0,0 @@
-package com.example.cardealershipservice;
-
-import javafx.application.Application;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class HelloApplication extends Application {
-    @Override
-    public void start(Stage stage) throws IOException {
-        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource("hello-view.fxml"));
-        Scene scene = new Scene(fxmlLoader.load(), 320, 240);
-        stage.setTitle("this is an update  ");
-        stage.setScene(scene);
-        stage.show();
-    }
-
-    public static void main(String[] args) {
-        launch();
-    }
-}
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1729960571054)
+++ b/.idea/encodings.xml	(date 1729960571054)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/example/cardealershipservice/ThemeToggleFeature.java
===================================================================
diff --git a/src/main/java/com/example/cardealershipservice/ThemeToggleFeature.java b/src/main/java/com/example/cardealershipservice/ThemeToggleFeature.java
new file mode 100644
--- /dev/null	(date 1729961859849)
+++ b/src/main/java/com/example/cardealershipservice/ThemeToggleFeature.java	(date 1729961859849)
@@ -0,0 +1,121 @@
+package com.example.cardealershipservice;
+/**
+ * Name:Himal Shrestha
+ * Class: CSC 325 - Software Engineering
+ * Prof: Ilknur
+ * Theme Toggle Feature
+ */
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+
+public class ThemeToggleFeature extends JFrame {
+    private JPanel mainPanel;
+    private CustomToggleButton toggleButton;
+
+    // Define light and dark theme background colors
+    private final Color lightBackground = Color.WHITE;
+    private final Color darkBackground = Color.DARK_GRAY;
+
+    public ThemeToggleFeature() {
+        setTitle("Light/Dark Mode Toggle"); // Set the window title
+        setSize(400, 300); // Set the size of the window
+        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Exit the application on window close
+
+        // Initialize the main panel with a BorderLayout to manage layout positions
+        mainPanel = new JPanel(new BorderLayout());
+
+        // Create and configure the custom toggle button
+        toggleButton = new CustomToggleButton();
+        toggleButton.setPreferredSize(new Dimension(70, 35)); // Set button size for better visibility of text
+
+        // Set the initial theme to light mode (toggleButton is initialized at this point)
+        setLightMode();
+
+        // Add a mouse listener to toggle between light and dark themes when clicked
+        toggleButton.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseClicked(MouseEvent e) {
+                // Check the toggle button's state and apply the corresponding theme
+                if (toggleButton.isSelected()) {
+                    setDarkMode(); // Apply dark mode if selected
+                } else {
+                    setLightMode(); // Apply light mode if deselected
+                }
+            }
+        });
+
+        // Create a top bar panel to hold the toggle button aligned to the right
+        JPanel topBarPanel = new JPanel(new BorderLayout());
+        topBarPanel.setOpaque(false); // Make top bar panel transparent
+        topBarPanel.add(toggleButton, BorderLayout.EAST); // Position toggle button on the right
+
+        // Add the top bar panel to the main panel, positioned at the top
+        mainPanel.add(topBarPanel, BorderLayout.NORTH);
+        add(mainPanel); // Add the main panel to the frame
+    }
+
+    // Method to set the light mode theme
+    private void setLightMode() {
+        mainPanel.setBackground(lightBackground); // Set background color for light mode
+        toggleButton.setSelected(false); // Set toggle button to "off" state
+    }
+
+    // Method to set the dark mode theme
+    private void setDarkMode() {
+        mainPanel.setBackground(darkBackground); // Set background color for dark mode
+        toggleButton.setSelected(true); // Set toggle button to "on" state
+    }
+
+    public static void main(String[] args) {
+        SwingUtilities.invokeLater(() -> {
+            ThemeToggleFeature app = new ThemeToggleFeature(); // Create the application instance
+            app.setVisible(true); // Make the application window visible
+        });
+    }
+
+    // Custom toggle button class to create a rounded switch appearance
+    static class CustomToggleButton extends JToggleButton {
+        private final Color onColor = new Color(76, 175, 80);  // Green color for "On" state
+        private final Color offColor = Color.LIGHT_GRAY;       // Gray color for "Off" state
+
+        @Override
+        protected void paintComponent(Graphics g) {
+            Graphics2D g2d = (Graphics2D) g.create();
+            int width = getWidth();
+            int height = getHeight();
+
+            // Enable anti-aliasing for smooth edges on graphics
+            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+
+            // Set the background color based on the toggle's selected state
+            if (isSelected()) {
+                g2d.setColor(onColor); // Green background for "On"
+            } else {
+                g2d.setColor(offColor); // Gray background for "Off"
+            }
+
+            // Draw a rounded rectangle as the toggle button background
+            g2d.fillRoundRect(0, 0, width, height, height, height);
+
+            // Calculate and draw the sliding circle
+            int circleDiameter = height - 6; // Set circle diameter slightly smaller than height for padding
+            int circleX = isSelected() ? width - circleDiameter - 3 : 3; // Circle moves left or right based on state
+            g2d.setColor(Color.WHITE); // Circle color
+            g2d.fillOval(circleX, 3, circleDiameter, circleDiameter); // Draw the circle
+
+            // Draw the "On" or "Off" text centered within the toggle button
+            g2d.setColor(Color.WHITE); // Text color
+            g2d.setFont(new Font("Arial", Font.BOLD, 12)); // Text font and style
+            String text = isSelected() ? "On" : "Off"; // Set text based on the selected state
+            FontMetrics fm = g2d.getFontMetrics(); // Get font metrics for centering the text
+            int textX = (width - fm.stringWidth(text)) / 2; // Center text horizontally
+            int textY = (height + fm.getAscent()) / 2 - 2; // Center text vertically
+            g2d.drawString(text, textX, textY); // Draw the text
+
+            g2d.dispose(); // Dispose of the graphics object to free resources
+        }
+    }
+}
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example.cardealershipservice {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n\r\n\r\n    opens com.example.cardealershipservice to javafx.fxml;\r\n    exports com.example.cardealershipservice;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision ff4b4bfb52d6ffb4402117d892e9698e0ecec3c1)
+++ b/src/main/java/module-info.java	(date 1729960796268)
@@ -1,6 +1,7 @@
 module com.example.cardealershipservice {
     requires javafx.controls;
     requires javafx.fxml;
+    requires java.desktop;
 
 
     opens com.example.cardealershipservice to javafx.fxml;
